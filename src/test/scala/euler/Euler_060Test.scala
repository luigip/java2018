package euler

import org.scalatest.{FunSuite, Matchers}

class Euler_060Test extends FunSuite with Matchers {

  val e = new Euler_060

  test("testGetCombos") {
    e.getCombos(2, 10) shouldEqual Stream(Set(3, 7))
    e.getCombos(3, 999) shouldEqual Stream(Set(3, 7, 109), Set(3, 7, 229), Set(3, 7, 541), Set(3, 7, 673), Set(3, 7, 823), Set(3, 11, 701), Set(3, 17, 449), Set(3, 37, 67), Set(3, 37, 607), Set(3, 59, 929), Set(3, 73, 607), Set(3, 73, 823), Set(3, 109, 673), Set(3, 137, 191), Set(3, 137, 359), Set(3, 137, 947), Set(3, 229, 373), Set(3, 229, 499), Set(3, 229, 613), Set(3, 331, 739), Set(3, 359, 701), Set(3, 373, 823), Set(3, 449, 557), Set(3, 467, 617), Set(3, 499, 673), Set(3, 613, 673), Set(3, 719, 947), Set(7, 19, 97), Set(7, 19, 433), Set(7, 19, 937), Set(7, 61, 487), Set(7, 97, 829), Set(7, 97, 883), Set(7, 109, 673), Set(7, 109, 883), Set(7, 229, 433), Set(7, 229, 547), Set(7, 229, 937), Set(7, 283, 487), Set(7, 283, 541), Set(7, 433, 883), Set(7, 487, 757), Set(7, 523, 541), Set(7, 547, 823), Set(7, 547, 853), Set(7, 757, 829), Set(11, 23, 743), Set(11, 251, 941), Set(13, 19, 577), Set(13, 19, 709), Set(13, 19, 997), Set(13, 61, 331), Set(13, 103, 997), Set(13, 127, 241), Set(13, 127, 331), Set(13, 331, 577), Set(13, 523, 577), Set(17, 83, 449), Set(17, 389, 971), Set(19, 31, 181), Set(19, 31, 991), Set(19, 163, 997), Set(19, 433, 571), Set(19, 577, 937), Set(19, 727, 997), Set(23, 311, 677), Set(23, 311, 827), Set(23, 677, 827), Set(29, 179, 383), Set(29, 347, 401), Set(31, 139, 907), Set(37, 79, 967), Set(37, 313, 991), Set(37, 607, 967), Set(37, 607, 991), Set(41, 227, 593), Set(41, 227, 719), Set(41, 593, 863), Set(41, 719, 911), Set(43, 499, 691), Set(47, 149, 251), Set(59, 197, 971), Set(59, 419, 929), Set(67, 139, 547), Set(67, 139, 619), Set(71, 257, 263), Set(71, 263, 443), Set(71, 263, 821), Set(71, 389, 947), Set(71, 389, 971), Set(71, 719, 947), Set(71, 821, 971), Set(73, 547, 643), Set(73, 547, 823), Set(79, 367, 613), Set(83, 227, 719), Set(83, 443, 701), Set(83, 449, 563), Set(83, 719, 773), Set(83, 719, 911), Set(89, 431, 983), Set(89, 443, 983), Set(89, 521, 809), Set(89, 809, 821), Set(89, 809, 983), Set(97, 241, 883), Set(101, 197, 641), Set(101, 467, 641), Set(109, 139, 661), Set(109, 199, 673), Set(109, 661, 883), Set(109, 859, 919), Set(113, 233, 983), Set(127, 157, 733), Set(127, 241, 271), Set(127, 241, 601), Set(131, 449, 941), Set(137, 197, 947), Set(137, 239, 947), Set(137, 353, 359), Set(137, 659, 947), Set(137, 743, 947), Set(139, 367, 457), Set(139, 547, 661), Set(139, 547, 709), Set(139, 547, 787), Set(139, 709, 967), Set(149, 251, 491), Set(149, 251, 971), Set(149, 563, 971), Set(163, 193, 811), Set(163, 193, 883), Set(163, 307, 367), Set(163, 367, 613), Set(163, 613, 883), Set(163, 811, 997), Set(167, 521, 641), Set(179, 269, 317), Set(181, 193, 283), Set(181, 193, 751), Set(181, 199, 751), Set(181, 283, 397), Set(181, 421, 607), Set(181, 607, 619), Set(181, 751, 787), Set(191, 227, 281), Set(193, 283, 541), Set(193, 283, 601), Set(193, 433, 883), Set(199, 211, 373), Set(199, 379, 751), Set(199, 379, 811), Set(199, 379, 877), Set(199, 739, 751), Set(211, 313, 727), Set(211, 349, 373), Set(211, 349, 499), Set(223, 229, 547), Set(223, 337, 919), Set(227, 281, 719), Set(229, 373, 937), Set(233, 239, 347), Set(233, 251, 347), Set(233, 347, 983), Set(233, 617, 983), Set(233, 881, 983), Set(239, 509, 947), Set(239, 641, 929), Set(241, 313, 727), Set(241, 601, 823), Set(241, 691, 727), Set(241, 727, 823), Set(257, 263, 293), Set(263, 443, 761), Set(263, 647, 821), Set(269, 617, 887), Set(277, 751, 787), Set(281, 509, 797), Set(283, 487, 601), Set(293, 311, 827), Set(293, 467, 617), Set(307, 523, 577), Set(311, 677, 827), Set(311, 821, 827), Set(331, 577, 937), Set(337, 349, 919), Set(337, 691, 919), Set(347, 443, 983), Set(349, 409, 709), Set(349, 709, 967), Set(379, 751, 997), Set(379, 811, 997), Set(379, 877, 997), Set(409, 691, 709), Set(419, 443, 701), Set(419, 449, 563), Set(431, 929, 983), Set(439, 541, 661), Set(439, 613, 661), Set(457, 757, 829), Set(461, 479, 569), Set(463, 613, 829), Set(467, 587, 617), Set(479, 821, 971), Set(547, 661, 769), Set(547, 709, 823), Set(547, 787, 823), Set(613, 661, 883), Set(631, 739, 751), Set(661, 877, 883), Set(683, 719, 911), Set(709, 823, 967), Set(719, 911, 947), Set(733, 883, 991), Set(809, 821, 827), Set(809, 929, 983), Set(821, 827, 857))
    e.getCombos(5,9999) shouldEqual Stream(Set(13, 5197, 5701, 6733, 8389))
  }

  test("testIsRemarkablePair") {

  }

  test("testPairCombos") {
    val e2 = new Euler_060 {
      override val numberOfPrimesInSet = 2
      override val maxSearch: Int = 20
    }
    e2.pairCombos(20) shouldEqual Stream(Set(3, 7), Set(3, 11), Set(3, 17), Set(7, 19), Set(13, 19))
  }

  test("testIsRemarkable") {
    e.isRemarkable(Set(3,7,109), 673) shouldEqual true
    e.isRemarkable(Set(3,7,107), 673) shouldEqual false
    e.isRemarkable(Set(3,7,109), 671) shouldEqual false
  }

  test("Example solution") {
    val e2 = new Euler_060 {
      override val numberOfPrimesInSet = 4
      override val maxSearch: Int = 700
    }
    e2.solve shouldEqual 792
  }

}
